"use strict";(self.webpackChunkzynthbox_webconf_metaheader=self.webpackChunkzynthbox_webconf_metaheader||[]).push([[452],{3452:(e,t,a)=>{a.r(t),a.d(t,{DsdiffContentParseError:()=>d,DsdiffParser:()=>u});var n=a(3606),i=a(1227),s=a(9223),r=a(1339),o=a(2291),h=a(3777);const k={len:12,get:(e,t)=>({chunkID:r.A.get(e,t),chunkSize:n.INT64_BE.get(e,t+4)})};var c=a(1030);const m=i("music-metadata:parser:aiff");class d extends((0,c.f8)("DSDIFF")){}class u extends o.g{async parse(){const e=await this.tokenizer.readToken(k);if("FRM8"!==e.chunkID)throw new d("Unexpected chunk-ID");const t=(await this.tokenizer.readToken(r.A)).trim();if("DSD"===t)return this.metadata.setFormat("container",`DSDIFF/${t}`),this.metadata.setFormat("lossless",!0),this.readFmt8Chunks(e.chunkSize-BigInt(r.A.len));throw new d(`Unsupported DSDIFF type: ${t}`)}async readFmt8Chunks(e){for(;e>=k.len;){const t=await this.tokenizer.readToken(k);m(`Chunk id=${t.chunkID}`),await this.readData(t),e-=BigInt(k.len)+t.chunkSize}}async readData(e){m(`Reading data of chunk[ID=${e.chunkID}, size=${e.chunkSize}]`);const t=this.tokenizer.position;switch(e.chunkID.trim()){case"FVER":{const e=await this.tokenizer.readToken(n.UINT32_LE);m(`DSDIFF version=${e}`);break}case"PROP":if("SND "!==await this.tokenizer.readToken(r.A))throw new d("Unexpected PROP-chunk ID");await this.handleSoundPropertyChunks(e.chunkSize-BigInt(r.A.len));break;case"ID3":{const t=await this.tokenizer.readToken(new n.Uint8ArrayType(Number(e.chunkSize))),a=s.FY(t);await(new h.e).parse(this.metadata,a,this.options);break}case"DSD":this.metadata.format.numberOfChannels&&this.metadata.setFormat("numberOfSamples",Number(e.chunkSize*BigInt(8)/BigInt(this.metadata.format.numberOfChannels))),this.metadata.format.numberOfSamples&&this.metadata.format.sampleRate&&this.metadata.setFormat("duration",this.metadata.format.numberOfSamples/this.metadata.format.sampleRate);break;default:m(`Ignore chunk[ID=${e.chunkID}, size=${e.chunkSize}]`)}const a=e.chunkSize-BigInt(this.tokenizer.position-t);a>0&&(m(`After Parsing chunk, remaining ${a} bytes`),await this.tokenizer.ignore(Number(a)))}async handleSoundPropertyChunks(e){for(m(`Parsing sound-property-chunks, remainingSize=${e}`);e>0;){const t=await this.tokenizer.readToken(k);m(`Sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`);const a=this.tokenizer.position;switch(t.chunkID.trim()){case"FS":{const e=await this.tokenizer.readToken(n.UINT32_BE);this.metadata.setFormat("sampleRate",e);break}case"CHNL":{const e=await this.tokenizer.readToken(n.UINT16_BE);this.metadata.setFormat("numberOfChannels",e),await this.handleChannelChunks(t.chunkSize-BigInt(n.UINT16_BE.len));break}case"CMPR":{const e=(await this.tokenizer.readToken(r.A)).trim(),t=await this.tokenizer.readToken(n.UINT8),a=await this.tokenizer.readToken(new n.StringType(t,"ascii"));"DSD"===e&&(this.metadata.setFormat("lossless",!0),this.metadata.setFormat("bitsPerSample",1)),this.metadata.setFormat("codec",`${e} (${a})`);break}case"ABSS":{const e=await this.tokenizer.readToken(n.UINT16_BE),t=await this.tokenizer.readToken(n.UINT8),a=await this.tokenizer.readToken(n.UINT8),i=await this.tokenizer.readToken(n.UINT32_BE);m(`ABSS ${e}:${t}:${a}.${i}`);break}case"LSCO":{const e=await this.tokenizer.readToken(n.UINT16_BE);m(`LSCO lsConfig=${e}`);break}default:m(`Unknown sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`),await this.tokenizer.ignore(Number(t.chunkSize))}const i=t.chunkSize-BigInt(this.tokenizer.position-a);i>0&&(m(`After Parsing sound-property-chunk ${t.chunkSize}, remaining ${i} bytes`),await this.tokenizer.ignore(Number(i))),e-=BigInt(k.len)+t.chunkSize,m(`Parsing sound-property-chunks, remainingSize=${e}`)}if(this.metadata.format.lossless&&this.metadata.format.sampleRate&&this.metadata.format.numberOfChannels&&this.metadata.format.bitsPerSample){const e=this.metadata.format.sampleRate*this.metadata.format.numberOfChannels*this.metadata.format.bitsPerSample;this.metadata.setFormat("bitrate",e)}}async handleChannelChunks(e){m(`Parsing channel-chunks, remainingSize=${e}`);const t=[];for(;e>=r.A.len;){const a=await this.tokenizer.readToken(r.A);m(`Channel[ID=${a}]`),t.push(a),e-=BigInt(r.A.len)}return m(`Channels: ${t.join(", ")}`),t}}}}]);