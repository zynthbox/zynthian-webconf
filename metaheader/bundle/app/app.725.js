"use strict";(self.webpackChunkzynthbox_webconf_metaheader=self.webpackChunkzynthbox_webconf_metaheader||[]).push([[725],{6725:(e,t,a)=>{a.r(t),a.d(t,{DsdContentParseError:()=>u,DsfParser:()=>f});var s=a(1227),n=a(3741),i=a(3606),r=a(1339);const o={len:12,get:(e,t)=>({id:r.A.get(e,t),size:i.UINT64_LE.get(e,t+4)})},h={len:16,get:(e,t)=>({fileSize:i.INT64_LE.get(e,t),metadataPointer:i.INT64_LE.get(e,t+8)})};var d;!function(e){e[e.mono=1]="mono",e[e.stereo=2]="stereo",e[e.channels=3]="channels",e[e.quad=4]="quad",e[e["4 channels"]=5]="4 channels",e[e["5 channels"]=6]="5 channels",e[e["5.1 channels"]=7]="5.1 channels"}(d||(d={}));const m={len:40,get:(e,t)=>({formatVersion:i.INT32_LE.get(e,t),formatID:i.INT32_LE.get(e,t+4),channelType:i.INT32_LE.get(e,t+8),channelNum:i.INT32_LE.get(e,t+12),samplingFrequency:i.INT32_LE.get(e,t+16),bitsPerSample:i.INT32_LE.get(e,t+20),sampleCount:i.INT64_LE.get(e,t+24),blockSizePerChannel:i.INT32_LE.get(e,t+32)})};var c=a(3777),l=a(1030);const p=s("music-metadata:parser:DSF");class u extends((0,l.f8)("DSD")){}class f extends n.N{async postId3v2Parse(){const e=this.tokenizer.position,t=await this.tokenizer.readToken(o);if("DSD "!==t.id)throw new u("Invalid chunk signature");this.metadata.setFormat("container","DSF"),this.metadata.setFormat("lossless",!0);const a=await this.tokenizer.readToken(h);if(a.metadataPointer!==BigInt(0))return p(`expect ID3v2 at offset=${a.metadataPointer}`),await this.parseChunks(a.fileSize-t.size),await this.tokenizer.ignore(Number(a.metadataPointer)-this.tokenizer.position-e),(new c.e).parse(this.metadata,this.tokenizer,this.options);p("No ID3v2 tag present")}async parseChunks(e){for(;e>=o.len;){const t=await this.tokenizer.readToken(o);if(p(`Parsing chunk name=${t.id} size=${t.size}`),"fmt "===t.id){const e=await this.tokenizer.readToken(m);this.metadata.setFormat("numberOfChannels",e.channelNum),this.metadata.setFormat("sampleRate",e.samplingFrequency),this.metadata.setFormat("bitsPerSample",e.bitsPerSample),this.metadata.setFormat("numberOfSamples",e.sampleCount),this.metadata.setFormat("duration",Number(e.sampleCount)/e.samplingFrequency);const t=e.bitsPerSample*e.samplingFrequency*e.channelNum;return void this.metadata.setFormat("bitrate",t)}this.tokenizer.ignore(Number(t.size)-o.len),e-=t.size}}}},3741:(e,t,a)=>{a.d(t,{N:()=>m});var s=a(7866),n=a(1227),i=a(6284),r=a(3777),o=a(4382),h=a(2291);const d=n("music-metadata:parser:ID3");class m extends h.g{constructor(){super(...arguments),this.id3parser=new r.e}static async startsWithID3v2Header(e){return"ID3"===(await e.peekToken(i.$2)).fileIdentifier}async parse(){try{await this.parseID3v2()}catch(e){if(!(e instanceof s.dL))throw e;d("End-of-stream")}}finalize(){}async parseID3v2(){if(await this.tryReadId3v2Headers(),d("End of ID3v2 header, go to MPEG-parser: pos=%s",this.tokenizer.position),await this.postId3v2Parse(),this.options.skipPostHeaders&&this.metadata.hasAny())this.finalize();else{const e=new o.R0(this.metadata,this.tokenizer,this.options);await e.parse(),this.finalize()}}async tryReadId3v2Headers(){if("ID3"===(await this.tokenizer.peekToken(i.$2)).fileIdentifier)return d("Found ID3v2 header, pos=%s",this.tokenizer.position),await this.id3parser.parse(this.metadata,this.tokenizer,this.options),this.tryReadId3v2Headers()}}}}]);