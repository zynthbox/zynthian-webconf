"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkzynthbox_webconf_metaheader"] = self["webpackChunkzynthbox_webconf_metaheader"] || []).push([["node_modules_music-metadata_lib_dsdiff_DsdiffParser_js"],{

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DsdiffContentParseError: () => (/* binding */ DsdiffContentParseError),\n/* harmony export */   DsdiffParser: () => (/* binding */ DsdiffParser)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! strtok3 */ \"./node_modules/strtok3/lib/core.js\");\n/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/FourCC.js */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/BasicParser.js */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\n/* harmony import */ var _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../id3v2/ID3v2Parser.js */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\n/* harmony import */ var _DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DsdiffToken.js */ \"./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js\");\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ParseError.js */ \"./node_modules/music-metadata/lib/ParseError.js\");\n\n\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:aiff');\nclass DsdiffContentParseError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_7__.makeUnexpectedFileContentError)('DSDIFF') {\n}\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nclass DsdiffParser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_4__.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new DsdiffContentParseError('Unexpected chunk-ID');\n        const type = (await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken.len));\n            default:\n                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= _DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': { // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            }\n            case 'PROP': { // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken);\n                if (propType !== 'SND ')\n                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken.len));\n                break;\n            }\n            case 'ID3': { // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3__WEBPACK_IMPORTED_MODULE_2__.fromBuffer(id3_data);\n                await new _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_5__.ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            }\n            case 'DSD':\n                if (this.metadata.format.numberOfChannels) {\n                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                }\n                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {\n                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                }\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': { // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                }\n                case 'CHNL': { // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.len));\n                    break;\n                }\n                case 'CMPR': { // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                }\n                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);\n                    const seconds = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8);\n                    const samples = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                }\n                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                }\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(_DsdiffToken_js__WEBPACK_IMPORTED_MODULE_6__.ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= _common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(_common_FourCC_js__WEBPACK_IMPORTED_MODULE_3__.FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\n//# sourceMappingURL=DsdiffParser.js.map\n\n//# sourceURL=webpack://zynthbox-webconf-metaheader/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js":
/*!***************************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChunkHeader64: () => (/* binding */ ChunkHeader64)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/FourCC.js */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n\n\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nconst ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__.FourCcToken.get(buf, off),\n            // Size\n            chunkSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceMappingURL=DsdiffToken.js.map\n\n//# sourceURL=webpack://zynthbox-webconf-metaheader/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js?");

/***/ })

}]);