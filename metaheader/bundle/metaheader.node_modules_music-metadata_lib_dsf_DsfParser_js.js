"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkzynthbox_webconf_metaheader"] = self["webpackChunkzynthbox_webconf_metaheader"] || []).push([["node_modules_music-metadata_lib_dsf_DsfParser_js"],{

/***/ "./node_modules/music-metadata/lib/dsf/DsfChunk.js":
/*!*********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfChunk.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelType: () => (/* binding */ ChannelType),\n/* harmony export */   ChunkHeader: () => (/* binding */ ChunkHeader),\n/* harmony export */   DsdChunk: () => (/* binding */ DsdChunk),\n/* harmony export */   FormatChunk: () => (/* binding */ FormatChunk)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"./node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/FourCC.js */ \"./node_modules/music-metadata/lib/common/FourCC.js\");\n\n\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nconst ChunkHeader = {\n    len: 12,\n    get: (buf, off) => {\n        return { id: _common_FourCC_js__WEBPACK_IMPORTED_MODULE_1__.FourCcToken.get(buf, off), size: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_LE.get(buf, off + 4) };\n    }\n};\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nconst DsdChunk = {\n    len: 16,\n    get: (buf, off) => {\n        return {\n            fileSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT64_LE.get(buf, off),\n            metadataPointer: token_types__WEBPACK_IMPORTED_MODULE_0__.INT64_LE.get(buf, off + 8)\n        };\n    }\n};\nvar ChannelType;\n(function (ChannelType) {\n    ChannelType[ChannelType[\"mono\"] = 1] = \"mono\";\n    ChannelType[ChannelType[\"stereo\"] = 2] = \"stereo\";\n    ChannelType[ChannelType[\"channels\"] = 3] = \"channels\";\n    ChannelType[ChannelType[\"quad\"] = 4] = \"quad\";\n    ChannelType[ChannelType[\"4 channels\"] = 5] = \"4 channels\";\n    ChannelType[ChannelType[\"5 channels\"] = 6] = \"5 channels\";\n    ChannelType[ChannelType[\"5.1 channels\"] = 7] = \"5.1 channels\";\n})(ChannelType || (ChannelType = {}));\n/**\n * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size\n */\nconst FormatChunk = {\n    len: 40,\n    get: (buf, off) => {\n        return {\n            formatVersion: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off),\n            formatID: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 4),\n            channelType: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 8),\n            channelNum: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 12),\n            samplingFrequency: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 16),\n            bitsPerSample: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 20),\n            sampleCount: token_types__WEBPACK_IMPORTED_MODULE_0__.INT64_LE.get(buf, off + 24),\n            blockSizePerChannel: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_LE.get(buf, off + 32)\n        };\n    }\n};\n//# sourceMappingURL=DsfChunk.js.map\n\n//# sourceURL=webpack://zynthbox-webconf-metaheader/./node_modules/music-metadata/lib/dsf/DsfChunk.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/dsf/DsfParser.js":
/*!**********************************************************!*\
  !*** ./node_modules/music-metadata/lib/dsf/DsfParser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DsdContentParseError: () => (/* binding */ DsdContentParseError),\n/* harmony export */   DsfParser: () => (/* binding */ DsfParser)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n/* harmony import */ var _id3v2_AbstractID3Parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../id3v2/AbstractID3Parser.js */ \"./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\n/* harmony import */ var _DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DsfChunk.js */ \"./node_modules/music-metadata/lib/dsf/DsfChunk.js\");\n/* harmony import */ var _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../id3v2/ID3v2Parser.js */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ParseError.js */ \"./node_modules/music-metadata/lib/ParseError.js\");\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:DSF');\nclass DsdContentParseError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_4__.makeUnexpectedFileContentError)('DSD') {\n}\n/**\n * DSF (dsd stream file) File Parser\n * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n */\nclass DsfParser extends _id3v2_AbstractID3Parser_js__WEBPACK_IMPORTED_MODULE_1__.AbstractID3Parser {\n    async postId3v2Parse() {\n        const p0 = this.tokenizer.position; // mark start position, normally 0\n        const chunkHeader = await this.tokenizer.readToken(_DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.ChunkHeader);\n        if (chunkHeader.id !== 'DSD ')\n            throw new DsdContentParseError('Invalid chunk signature');\n        this.metadata.setFormat('container', 'DSF');\n        this.metadata.setFormat('lossless', true);\n        const dsdChunk = await this.tokenizer.readToken(_DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.DsdChunk);\n        if (dsdChunk.metadataPointer === BigInt(0)) {\n            debug(\"No ID3v2 tag present\");\n        }\n        else {\n            debug(`expect ID3v2 at offset=${dsdChunk.metadataPointer}`);\n            await this.parseChunks(dsdChunk.fileSize - chunkHeader.size);\n            // Jump to ID3 header\n            await this.tokenizer.ignore(Number(dsdChunk.metadataPointer) - this.tokenizer.position - p0);\n            return new _id3v2_ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__.ID3v2Parser().parse(this.metadata, this.tokenizer, this.options);\n        }\n    }\n    async parseChunks(bytesRemaining) {\n        while (bytesRemaining >= _DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.ChunkHeader.len) {\n            const chunkHeader = await this.tokenizer.readToken(_DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.ChunkHeader);\n            debug(`Parsing chunk name=${chunkHeader.id} size=${chunkHeader.size}`);\n            switch (chunkHeader.id) {\n                case 'fmt ': {\n                    const formatChunk = await this.tokenizer.readToken(_DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.FormatChunk);\n                    this.metadata.setFormat('numberOfChannels', formatChunk.channelNum);\n                    this.metadata.setFormat('sampleRate', formatChunk.samplingFrequency);\n                    this.metadata.setFormat('bitsPerSample', formatChunk.bitsPerSample);\n                    this.metadata.setFormat('numberOfSamples', formatChunk.sampleCount);\n                    this.metadata.setFormat('duration', Number(formatChunk.sampleCount) / formatChunk.samplingFrequency);\n                    const bitrate = formatChunk.bitsPerSample * formatChunk.samplingFrequency * formatChunk.channelNum;\n                    this.metadata.setFormat('bitrate', bitrate);\n                    return; // We got what we want, stop further processing of chunks\n                }\n                default:\n                    this.tokenizer.ignore(Number(chunkHeader.size) - _DsfChunk_js__WEBPACK_IMPORTED_MODULE_2__.ChunkHeader.len);\n                    break;\n            }\n            bytesRemaining -= chunkHeader.size;\n        }\n    }\n}\n//# sourceMappingURL=DsfParser.js.map\n\n//# sourceURL=webpack://zynthbox-webconf-metaheader/./node_modules/music-metadata/lib/dsf/DsfParser.js?");

/***/ }),

/***/ "./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractID3Parser: () => (/* binding */ AbstractID3Parser)\n/* harmony export */ });\n/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! strtok3 */ \"./node_modules/strtok3/lib/core.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n/* harmony import */ var _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ID3v2Token.js */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/* harmony import */ var _ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ID3v2Parser.js */ \"./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\n/* harmony import */ var _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../id3v1/ID3v1Parser.js */ \"./node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\n/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/BasicParser.js */ \"./node_modules/music-metadata/lib/common/BasicParser.js\");\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_5__.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new _ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__.ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__.ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof strtok3__WEBPACK_IMPORTED_MODULE_0__.EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__.ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__.ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map\n\n//# sourceURL=webpack://zynthbox-webconf-metaheader/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js?");

/***/ })

}]);